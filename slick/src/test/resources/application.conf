akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  loglevel = "WARNING"
  stdout-loglevel = "WARNING"
}

# This database configuration is used for all unit tests.
# It will create the following file: alpakka-slick-h2-test
# in the temporary directory.
#config-h2
# Load using SlickSession.forConfig("slick-h2")
slick-h2 {
  profile = "slick.jdbc.H2Profile$"
  db {
    connectionPool = disabled
    dataSourceClass = "slick.jdbc.DriverDataSource"
    properties = {
      driver = "org.h2.Driver"
      url = "jdbc:h2:"${java.io.tmpdir}"/alpakka-slick-h2-test"
    }
  }
}
#config-h2

# This is an example DB2 database configuration that can be
# used to run the unit tests against DB2.
# It assumes a local DB2 database running on port 50000.
#
# We used the IBM DB2Express-C Docker image.
# Go to https://hub.docker.com/r/ibmcom/db2express-c/ and
# follow the instructions to set up a local DB2 database
# using Docker.
#
# In the configuration listed below we have reset the database
# password to "db2-admin-password" instead of the password used
# in the docker image instructions.
#
# In order to run the unit tests with this database configuration,
# you will need to download the DB2 JDBC driver from IBM and copy
# it to a `lib` directory in the project root for SBT to
# automatically pick it up.
#
# http://www-01.ibm.com/support/docview.wss?uid=swg21363866
#
# This connector has been tested using the db2jcc4 4.19.66
# version of the DB2 driver.
#
#config-db2
# Load using SlickSession.forConfig("slick-db2")
slick-db2 {
  profile = "slick.jdbc.DB2Profile$"
  db {
    dataSourceClass = "slick.jdbc.DriverDataSource"
    properties = {
      driver = "com.ibm.db2.jcc.DB2Driver"
      url = "jdbc:db2://localhost:50000/sample"
      user = "db2inst1"
      password = "db2-admin-password"
    }
  }
}
#config-db2

# An example Postgres database configuration.
#
#config-postgres
# Load using SlickSession.forConfig("slick-postgres")
slick-postgres {
  profile = "slick.jdbc.PostgresProfile$"
  db {
    dataSourceClass = "slick.jdbc.DriverDataSource"
    properties = {
      driver = "org.postgresql.Driver"
      url = "jdbc:postgresql://127.0.0.1/slickdemo"
      user = slick
      password = ""
    }
  }
}
#config-postgres

# An example Oracle database configuration.
#
#config-oracle
# Load using SlickSession.forConfig("slick-oracle")
slick-oracle {
  profile = "slick.jdbc.OracleProfile$"
  db {
    dataSourceClass = "slick.jdbc.DriverDataSource"
    properties = {
      driver = "oracle.jdbc.OracleDriver"
      url = "jdbc:oracle:thin:@//localhost:49161/xe"
      user = slick
      password = ""
    }
  }
}
#config-oracle

# An example SQL Server database configuration.
#
#config-sqlserver
# Load using SlickSession.forConfig("slick-sqlserver")
slick-sqlserver {
  profile = "slick.jdbc.SQLServerProfile$"
  db {
    dataSourceClass = "slick.jdbc.DriverDataSource"
    properties = {
      driver = "com.microsoft.sqlserver.jdbc.SQLServerDriver"
      url = "jdbc:sqlserver://localhost:1433"
      user = slick
      password = ""
    }
  }
}
#config-sqlserver

# An example MySQL database configuration.
#
#config-mysql
# Load using SlickSession.forConfig("slick-mysql")
slick-mysql {
  profile = "slick.jdbc.MySQLProfile$"
  db {
    dataSourceClass = "slick.jdbc.DriverDataSource"
    properties = {
      driver = "com.mysql.jdbc.Driver"
      url = "jdbc:mysql://localhost:3306/"
      user = slick
      password = ""
    }
  }
}
#config-mysql
